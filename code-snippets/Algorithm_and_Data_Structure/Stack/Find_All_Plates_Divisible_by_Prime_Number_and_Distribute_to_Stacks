//https://www.hackerrank.com/challenges/waiter/problem

bool isPrime(int n) {
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

vector<int> waiter(vector<int> number, int q) {
    
    int number_size = number.size();
    int prime = 2;
    int k = 0;
    
    stack<int> A, A_new;
    stack<int> B;
    
    vector<int> result(number_size);
    
    for(int i = 0; i < number_size; i++){
        A.push(number[i]);
    }
    
    for(int i = 0; i < q; i++){
        
        while(!isPrime(prime)){ 
            prime++;
        }
        while(!A.empty()){
            if(A.top() % prime == 0){
                B.push(A.top()); 
                A.pop();
            }   
            else{
                A_new.push(A.top());
                A.pop();
            }
        }
        while(!B.empty()){
            result[k++] = B.top();
            B.pop();
        }
        swap(A, A_new);
        prime++;
    }

    while(!A.empty()){
        result[k++] = A.top();
        A.pop();
    }
    
    return result;
}
